datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-1.0.x", "debian-openssl-1.1.x"]
  previewFeatures = ["referentialActions"]
}

enum Role {
  admin
  host
  user
}

enum ProfileType {
  UserProfile
  CompanyProfile
}

enum Gender {
  Male
  Female
  Other
}

enum ReservationStatus {
  Reserved
  Hold
  Pending
}

enum DocumentType {
  Profile
  Space
  OtherDocuments
}

model Account {
  id             String        @id @default(cuid())
  approved       Boolean       @default(false)
  email          String        @unique @db.VarChar(255)
  emailVerified  Boolean       @default(false)
  phoneNumber    String?       @db.VarChar(10)
  phoneVerified  Boolean       @default(false)
  password       String        @db.VarChar(255)
  roles          Role[]
  suspended      Boolean       @default(false)
  createdAt      DateTime      @default(now()) @db.Timestamp(6)
  updatedAt      DateTime      @updatedAt
  profileType    ProfileType
  userProfile    User?
  companyProfile Company?
  session        Session[]
  myReservation  Reservation[]
  mySpace        Space[]
  Credit         Credit[]
}

model User {
  id            String     @id @default(cuid())
  dob           DateTime?
  firstName     String     @db.VarChar(255)
  firstNameKana String     @db.VarChar(255)
  lastName      String     @db.VarChar(255)
  lastNameKana  String     @db.VarChar(255)
  createdAt     DateTime   @default(now()) @db.Timestamp(6)
  updatedAt     DateTime   @updatedAt
  accountId     String
  account       Account    @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  address       Address?
  documents     Document[]
}

model Company {
  id                 String   @id @default(cuid())
  name               String   @db.VarChar(255)
  nameKana           String   @db.VarChar(255)
  registrationNumber String   @db.VarBit(255)
  createdAt          DateTime @default(now()) @db.Timestamp(6)
  updatedAt          DateTime @updatedAt
  accountId          String
  account            Account  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  address            Address?
}

model Session {
  id        String   @id @default(cuid())
  revoked   Boolean  @default(false)
  userAgent String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
  accountId String
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ipData    IpData[]
}

model IpData {
  id          String   @id @default(cuid())
  city        String?  @db.VarChar(255)
  country     String?  @db.VarChar(255)
  countryCode String?  @db.VarChar(2)
  data        Json?
  ipAddress   String   @unique @db.VarChar(15)
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt
  sessionId   String
  session     Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Address {
  id           String     @id @default(cuid())
  addressLine1 String     @db.VarChar(255)
  addressLine2 String     @db.VarChar(255)
  city         String     @db.VarChar(255)
  longitude    Float?
  latitude     Float?
  postalCode   String     @db.VarChar(8)
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  updatedAt    DateTime   @updatedAt
  userId       String?
  user         User?      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId    String?
  company      Company?   @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  prefectureId Int
  prefecture   Prefecture @relation(fields: [prefectureId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Space {
  id              String               @id @default(cuid())
  name            String               @db.VarChar(255)
  maximumCapacity Int                  @default(0)
  numberOfSeats   Int                  @default(0)
  spaceSize       Float                @default(0)
  needApproval    Boolean              @default(false)
  createdAt       DateTime             @default(now()) @db.Timestamp(6)
  updatedAt       DateTime             @updatedAt
  accountId       String
  account         Account              @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spacePricePlans SpacePricePlan?
  reservations    Reservation[]
  nearestStations NearestStation[]
  spaceTypes      Space_To_SpaceType[]
}

model SpacePricePlan {
  id                 String   @id @default(cuid())
  planTitle          String   @db.VarChar(255)
  hourlyPrice        Float    @default(0)
  dailyPrice         Float    @default(0)
  maintenanceFee     Float    @default(0)
  lastMinuteDiscount Float    @default(0)
  cooldownTime       Int      @default(0)
  createdAt          DateTime @default(now()) @db.Timestamp(6)
  updatedAt          DateTime @updatedAt
  spaceId            String
  space              Space    @relation(fields: [spaceId], references: [id])
}

model Reservation {
  id           String            @id @default(cuid())
  fromDateTime DateTime          @default(now()) @db.Timestamp(6)
  toDateTime   DateTime
  status       ReservationStatus @default(Pending)
  createdAt    DateTime          @default(now()) @db.Timestamp(6)
  updatedAt    DateTime          @updatedAt
  space        Space             @relation(fields: [spaceId], references: [id])
  spaceId      String
  reservee     Account           @relation(fields: [reserveeId], references: [id])
  reserveeId   String
  approvedOn   DateTime          @db.Timestamp(6)
}

model Media {
  id        String    @id @default(cuid())
  original  String    @db.VarChar(255)
  medium    String    @db.VarChar(255)
  small     String    @db.VarChar(255)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt
  document  Document?
}

model Document {
  id           String       @id @default(cuid())
  user         User?        @relation(fields: [userId], references: [id])
  userId       String?
  documentType DocumentType
  media        Media        @relation(fields: [mediaId], references: [id])
  mediaId      String
}

model TrainLine {
  id           Int       @id
  name         String    @db.VarChar(255)
  nameKana     String?   @db.VarChar(255)
  nameOfficial String?   @db.VarChar(255)
  color        String?   @db.VarChar(6)
  longitude    Float?
  latitude     Float?
  zoom         Int?      @db.SmallInt
  status       Int?      @db.SmallInt
  order        Int
  stations     Station[]
}

model Station {
  id              Int              @id
  stationName     String           @db.VarChar(255)
  stationZipCode  String?          @db.VarChar(8)
  address         String?          @db.VarChar(511)
  longitude       Float?
  latitude        Float?
  status          Int?             @db.SmallInt
  order           Int?
  prefectureCode  Int
  prefecture      Prefecture       @relation(fields: [prefectureCode], references: [id])
  lineCode        Int
  line            TrainLine        @relation(fields: [lineCode], references: [id])
  nearestStations NearestStation[]
}

model NearestStation {
  space     Space   @relation(fields: [spaceId], references: [id])
  spaceId   String
  station   Station @relation(fields: [stationId], references: [id])
  stationId Int
  time      Int
  via       String

  @@id([spaceId, stationId])
}

model Prefecture {
  id         Int       @id
  name       String    @db.VarChar(255)
  nameKana   String    @db.VarChar(255)
  nameRomaji String    @db.VarChar(255)
  available  Boolean   @default(false)
  station    Station[]
  Address    Address[]
}

model SpaceType {
  id                String               @id @default(cuid())
  title             String               @db.VarChar(100)
  description       String               @db.VarChar(100)
  spaceToSpaceTypes Space_To_SpaceType[]
}

model Space_To_SpaceType {
  space       Space     @relation(fields: [spaceId], references: [id])
  spaceId     String
  spaceType   SpaceType @relation(fields: [spaceTypeId], references: [id])
  spaceTypeId String

  @@id([spaceId, spaceTypeId])
}

model Credit {
  id              String    @id @default(cuid())
  accountId       String?
  account         Account?  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  remainingCredit Int?      @default(0)
  date            DateTime? @db.Date

  @@unique([accountId, date], name: "Credit_accountId_date_key")
}
