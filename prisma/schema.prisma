datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "debian-openssl-1.1.x"]
}

enum Role {
  admin
  host
  user
}

enum ProfileType {
  UserProfile
  CompanyProfile
}

enum HostType {
  Individual
  Corporate
}

enum Gender {
  Male
  Female
  Other
}

enum ReservationStatus {
  RESERVED
  HOLD
  PENDING
  FAILED
  DISAPPROVED
  CANCELED
}

enum PhotoType {
  Profile
  Cover
  General
}

enum SpacePricePlanType {
  DAILY
  HOURLY
  MINUTES
}

enum PricePlanOverrideType {
  DAY_OF_WEEK
  DATE_TIME
}

enum PaymentSourceType {
  Card
}

enum PaymentProvider {
  STRIPE
}

enum TransactionAssetType {
  SPACE
}

enum TransactionStatus {
  CREATED
  REQUESTED
  REQUEST_SUCCESSFULL
  WEBHOOK_RECEIVED
  SUCCESSFULL
  FAILED
  CANCELED
}

enum ChatType {
  SINGLE
  GROUP
}

model Account {
  id             String          @id @default(cuid())
  approved       Boolean         @default(false)
  email          String          @unique @db.VarChar(255)
  emailVerified  Boolean         @default(false)
  phoneNumber    String?         @db.VarChar(10)
  phoneVerified  Boolean         @default(false)
  password       String          @db.VarChar(255)
  roles          Role[]
  suspended      Boolean         @default(false)
  createdAt      DateTime        @default(now()) @db.Timestamp(6)
  updatedAt      DateTime        @updatedAt
  profileType    ProfileType
  userProfile    User?
  companyProfile Company?
  session        Session[]
  myReservation  Reservation[]
  mySpace        Space[]
  Credit         Credit[]
  paymentSource  PaymentSource[]
  host           Host?
  chats          Chat[]          @relation("_AccountsChat")
  sentMessages   Message[]
  myTransaction  Transaction[]
  givenRatings   Rating[]
}

model PaymentSource {
  id        String            @id @default(cuid())
  token     String
  type      PaymentSourceType
  expMonth  Int
  expYear   Int
  last4     String
  brand     String
  country   String
  customer  String
  rawData   Json
  createdAt DateTime          @default(now()) @db.Timestamp(6)
  updatedAt DateTime          @updatedAt
  accountId String
  account   Account           @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model User {
  id               String    @id @default(cuid())
  dob              DateTime?
  firstName        String    @db.VarChar(255)
  firstNameKana    String    @db.VarChar(255)
  lastName         String    @db.VarChar(255)
  lastNameKana     String    @db.VarChar(255)
  stripeCustomerId String    @default("")
  createdAt        DateTime  @default(now()) @db.Timestamp(6)
  updatedAt        DateTime  @updatedAt
  accountId        String    @unique
  account          Account   @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  address          Address?
  profilePhoto     Photo?
}

model Company {
  id                 String   @id @default(cuid())
  name               String   @db.VarChar(255)
  nameKana           String   @db.VarChar(255)
  registrationNumber String   @db.VarBit(255)
  createdAt          DateTime @default(now()) @db.Timestamp(6)
  updatedAt          DateTime @updatedAt
  accountId          String   @unique
  account            Account  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  address            Address?
  profilePhoto       Photo?
}

model Host {
  id              String   @id @default(cuid())
  type            HostType
  name            String   @db.VarChar(255)
  stripeAccountId String?  @db.VarChar(255)
  approved        Boolean  @default(false)
  suspended       Boolean  @default(false)
  createdAt       DateTime @default(now()) @db.Timestamp(6)
  updatedAt       DateTime @updatedAt
  accountId       String   @unique
  account         Account  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profilePhoto    Photo?   @relation(name: "hostProfilePhoto")
  photoId         Photo?   @relation(name: "photoId")
}

model Session {
  id        String   @id @default(cuid())
  revoked   Boolean  @default(false)
  userAgent String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
  accountId String
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ipData    IpData[]
}

model IpData {
  id          String   @id @default(cuid())
  city        String?  @db.VarChar(255)
  country     String?  @db.VarChar(255)
  countryCode String?  @db.VarChar(2)
  data        Json?
  ipAddress   String   @unique @db.VarChar(15)
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt
  sessionId   String
  session     Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Address {
  id           String     @id @default(cuid())
  addressLine1 String     @db.VarChar(255)
  addressLine2 String?    @db.VarChar(255)
  city         String     @db.VarChar(255)
  longitude    Float?
  latitude     Float?
  postalCode   String     @db.VarChar(8)
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  updatedAt    DateTime   @updatedAt
  prefectureId Int
  prefecture   Prefecture @relation(fields: [prefectureId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String?    @unique
  user         User?      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId    String?    @unique
  company      Company?   @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spaceId      String?    @unique
  space        Space?     @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Space {
  id                 String           @id @default(cuid())
  name               String           @db.VarChar(255)
  description        String           @db.Text
  maximumCapacity    Int              @default(0)
  numberOfSeats      Int              @default(0)
  spaceSize          Float            @default(0)
  needApproval       Boolean          @default(false)
  createdAt          DateTime         @default(now()) @db.Timestamp(6)
  isDeleted          Boolean          @default(false)
  suspended          Boolean          @default(false)
  published          Boolean          @default(false)
  updatedAt          DateTime         @updatedAt
  accountId          String
  account            Account          @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  availableAmenities SpaceAmenities[] @relation("_SpaceAmenities")
  spaceTypes         SpaceType[]      @relation("_SpaceTypes")
  reservations       Reservation[]
  nearestStations    NearestStation[]
  address            Address?
  photos             Photo[]
  settings           SpaceSetting[]
  pricePlans         SpacePricePlan[]
  cancelPolicies     CancelPolicy[]
  ratings            Rating[]
}

model SpaceType {
  id          String  @id @default(cuid())
  title       String  @db.VarChar(100)
  description String  @db.Text
  available   Boolean @default(false)
  photo       Photo?
  spaces      Space[] @relation("_SpaceTypes")
}

model SpaceAmenities {
  id        String   @id @default(cuid())
  name      String
  spaces    Space[]  @relation("_SpaceAmenities")
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model SpaceSetting {
  id           String    @id @default(cuid())
  spaceId      String
  totalStock   Int       @default(1)
  isDefault    Boolean   @default(false)
  closed       Boolean   @default(false)
  businessDays Int[]
  openingHr    Float?
  closingHr    Float?
  breakFromHr  Float?
  breakToHr    Float?
  fromDate     DateTime?
  toDate       DateTime?
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  updatedAt    DateTime  @updatedAt
  space        Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SpacePricePlan {
  id                 String              @id @default(cuid())
  spaceId            String
  title              String              @db.VarChar(255)
  isDefault          Boolean             @default(false)
  isDeleted          Boolean             @default(false)
  type               SpacePricePlanType
  duration           Float
  amount             Float
  maintenanceFee     Float               @default(0)
  lastMinuteDiscount Float               @default(0)
  cooldownTime       Int                 @default(0)
  fromDate           DateTime?
  toDate             DateTime?
  createdAt          DateTime            @default(now()) @db.Timestamp(6)
  updatedAt          DateTime            @updatedAt
  space              Space               @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  overrides          PricePlanOverride[]
}

model PricePlanOverride {
  id          String                @id @default(cuid())
  pricePlanId String
  type        PricePlanOverrideType
  amount      Float
  daysOfWeek  Int[]
  isDeleted   Boolean               @default(false)
  fromDate    DateTime?
  toDate      DateTime?
  createdAt   DateTime              @default(now()) @db.Timestamp(6)
  updatedAt   DateTime              @updatedAt
  pricePlan   SpacePricePlan        @relation(fields: [pricePlanId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Rating {
  id          String   @id @default(cuid())
  rating      Float
  comment     String?  @db.Text
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt
  spaceId     String
  space       Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  byAccountId String
  byAccount   Account  @relation(fields: [byAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model CancelPolicy {
  id          String   @id @default(cuid())
  spaceId     String
  beforeHours Float
  percentage  Float
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt
  space       Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Reservation {
  id            String            @id @default(cuid())
  reservationId String            @default("TB")
  fromDateTime  DateTime          @default(now()) @db.Timestamp(6)
  toDateTime    DateTime
  status        ReservationStatus @default(PENDING)
  remarks       String?           @db.Text
  createdAt     DateTime          @default(now()) @db.Timestamp(6)
  updatedAt     DateTime          @updatedAt
  space         Space             @relation(fields: [spaceId], references: [id])
  spaceId       String
  reservee      Account           @relation(fields: [reserveeId], references: [id])
  reserveeId    String
  approved      Boolean
  approvedOn    DateTime?         @db.Timestamp(6)
  transaction   Transaction?
}

model Transaction {
  id                  String               @id @default(cuid())
  provider            PaymentProvider      @default(STRIPE)
  assetType           TransactionAssetType @default(SPACE)
  assetData           Json
  description         String               @db.Text
  amount              Float
  currency            String
  status              TransactionStatus
  paymentIntentId     String?
  requestedLog        Json?
  responseReceivedLog Json?
  webhookReceivedLog  Json?
  webhookRespondedLog Json?
  resultedLog         Json?
  failedLog           Json?
  createdAt           DateTime             @default(now()) @db.Timestamp(6)
  updatedAt           DateTime             @updatedAt
  accountId           String
  account             Account              @relation(fields: [accountId], references: [id])
  reservationId       String               @unique
  reservation         Reservation          @relation(fields: [reservationId], references: [id])
}

model TrainLine {
  id           Int       @id
  name         String    @db.VarChar(255)
  nameKana     String?   @db.VarChar(255)
  nameOfficial String?   @db.VarChar(255)
  color        String?   @db.VarChar(6)
  longitude    Float?
  latitude     Float?
  zoom         Int?      @db.SmallInt
  status       Int?      @db.SmallInt
  order        Int
  stations     Station[]
}

model Station {
  id              Int              @id
  stationName     String           @db.VarChar(255)
  stationZipCode  String?          @db.VarChar(8)
  address         String?          @db.VarChar(511)
  longitude       Float?
  latitude        Float?
  status          Int?             @db.SmallInt
  order           Int?
  prefectureCode  Int
  prefecture      Prefecture       @relation(fields: [prefectureCode], references: [id])
  lineCode        Int
  line            TrainLine        @relation(fields: [lineCode], references: [id])
  nearestStations NearestStation[]
}

model NearestStation {
  space     Space   @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spaceId   String
  station   Station @relation(fields: [stationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stationId Int
  time      Int
  via       String

  @@id([spaceId, stationId])
}

model Prefecture {
  id         Int       @id
  name       String    @db.VarChar(255)
  nameKana   String    @db.VarChar(255)
  nameRomaji String    @db.VarChar(255)
  available  Boolean   @default(false)
  station    Station[]
  Address    Address[]
}

model Credit {
  id              String    @id @default(cuid())
  accountId       String?
  account         Account?  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  remainingCredit Int?      @default(0)
  expiryDate      DateTime? @db.Date
  createdAt       DateTime  @default(now()) @db.Timestamp(6)
  updatedAt       DateTime  @updatedAt

  @@unique([accountId], name: "Credit_accountId_date_key")
}

model SubscriptionPlan {
  id          String   @id @default(cuid())
  credit      Float
  title       String
  monthlyFees Float
  yearlyFees  Float
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt
}

model Photo {
  id             String     @id @default(cuid())
  mime           String     @db.VarChar(15)
  type           PhotoType
  thumbnail      Json?
  medium         Json?
  small          Json?
  large          Json?
  postUploadInfo Json?
  createdAt      DateTime   @default(now()) @db.Timestamp(6)
  updatedAt      DateTime   @updatedAt
  space          Space?     @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spaceId        String?
  spaceType      SpaceType? @relation(fields: [spaceTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spaceTypeId    String?    @unique
  user           User?      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String?    @unique
  company        Company?   @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId      String?    @unique
  host           Host?      @relation(name: "hostProfilePhoto", fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hostId         String?    @unique
  photo          Host?      @relation(name: "photoId", fields: [photoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  photoId        String?    @unique
}

model Chat {
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  id        String    @id @default(cuid())
  members   Account[] @relation("_AccountsChat")
  messages  Message[]
  type      ChatType
  updatedAt DateTime  @updatedAt
}

model Message {
  createdAt DateTime @default(now()) @db.Timestamp(6)
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id        String   @id @default(cuid())
  message   String   @db.Text
  senderId  String
  sender    Account  @relation(fields: [senderId], references: [id])
  updatedAt DateTime @updatedAt
}
